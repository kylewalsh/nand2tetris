// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode instruction:
    And(a=instruction[15], b=true, out=instc);
    Not(in=instc, out=insta);

    // Should load A register?
    And(a=instc, b=instruction[5], out=cWriteA);
    Xor(a=insta, b=cWriteA, out=loada);
    
    // What to load in A register?
    Mux16(a=instruction, b=aluout, sel=cWriteA, out=decodeout);
    ARegister(in=decodeout, load=loada, out=outa, out[0..14]=addressM);
    
    // Should write to memory?
    And(a=instc, b=instruction[3], out=shouldWriteM, out=writeM);
    
    // What to load in to y of ALU input? (A/M)
    Mux16(a=outa, b=inM, sel=instruction[12], out=aluy);

    // What to load in to x of ALU input? (D)
    And(a=instc, b=instruction[4], out=stored);
    DRegister(in=aluout, load=stored, out=dout);

    // TODO: combine j-bit parsing with zr/ng out to validate jump instructions w/ alu output and feed those in to the PC
    ALU(x=dout, y=aluy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluout, zr=zr, ng=ng);
    
    Not(in=instruction[2], out=notj1);
    Not(in=notj1, out=j1);
    Not(in=instruction[1], out=notj2);
    Not(in=notj2, out=j2);
    Not(in=instruction[0], out=notj3);
    Not(in=notj3, out=j3);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    // No Jump
    And(a=notj1, b=notj2, out=notj1notj2);
    And(a=notj1notj2, b=notj3, out=maybenotjump);
    Or(a=insta, b=maybenotjump, out=notjump);


    // JGT
    And(a=notj1notj2, b=j3, out=jgtpins);
    And(a=notzr, b=notng, out=jgtalu);
    And(a=jgtpins, b=jgtalu, out=jgt);

    // JEQ
    And(a=notj1, b=j2, out=notj1j2);
    And(a=notj1j2, b=notj3, out=jeqpins);
    And(a=zr, b=notng, out=jeqalu);
    And(a=jeqalu, b=jeqpins, out=jeq);

    // JGE
    And(a=notj1, b=j2, out=jgej1j2);
    And(a=jgej1j2, b=j3, out=jgepins);
    Or(a=notng, b=zr, out=jgealu);
    And(a=jgepins, b=jgealu, out=jge);

    // JLT
    And(a=j1, b=notj2, out=j1notj2);
    And(a=j1notj2, b=notj3, out=jltpins);
    And(a=notzr, b=ng, out=jltalu);
    And(a=jltpins, b=jltalu, out=jlt);

    // JNE
    And(a=j1notj2, b=j3, out=jnepins);
    And(a=jnepins, b=notzr, out=jne);

    // JLE
    Or(a=ng, b=zr, out=jlealu);
    And(a=j1, b=j2, out=j1j2);
    And(a=j1j2, b=notj3, out=jlepins);
    And(a=jlealu, b=jlepins, out=jle);

    // JMP
    And(a=j1j2, b=j3, out=unconditionaljump);


    Not(in=notjump, out=jump);

    Xor(a=jgt, b=jeq, out=jgtjeq);
    Xor(a=jgtjeq, b=jge, out=jgtjeqjge);
    Xor(a=jgtjeqjge, b=jlt, out=jgtjeqjgejlt);
    Xor(a=jgtjeqjgejlt, b=jne, out=jgtjeqjgejltjne);
    Xor(a=jgtjeqjgejltjne, b=jle, out=jgtjeqjgejltjnejle);
    Xor(a=jgtjeqjgejltjnejle, b=unconditionaljump, out=anyjumppins);
    And(a=anyjumppins, b=jump, out=shouldjump);

    Not(in=shouldjump, out=doinc);

    PC(in=outa, load=shouldjump, inc=doinc, reset=reset, out[0..14]=pc);
}